// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Company {
  id             Int              @id @default(autoincrement())
  name           String
  address        String
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  deletedAt      DateTime?
  createdBy      Int?
  updatedBy      Int?
  deletedBy      Int?
  Role           Role[]
  RolePermission RolePermission[]
  CompanyUser    CompanyUser[]
}

model User {
  id          Int           @id @default(autoincrement())
  name        String
  userName    String        @unique
  email       String        @unique
  profile     String?
  lang        String?
  password    String
  roleType    String?
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  deletedAt   DateTime?
  createdBy   Int?
  updatedBy   Int?
  deletedBy   Int?
  Role        Role[]
  RoleUser    RoleUser[]
  CompanyUser CompanyUser[]
}

model CompanyUser {
  id        Int       @id @default(autoincrement())
  companyId Int
  company   Company   @relation(fields: [companyId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model Role {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  companyId       Int
  company         Company          @relation(fields: [companyId], references: [id])
  roleUsers       RoleUser[]
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
  User            User?            @relation(fields: [userId], references: [id])
  userId          Int?
}

model Permission {
  id              Int              @id @default(autoincrement())
  name            String
  description     String
  rolePermissions RolePermission[]
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  deletedAt       DateTime?
  createdBy       Int?
  updatedBy       Int?
  deletedBy       Int?
}

model RolePermission {
  id           Int        @id @default(autoincrement())
  roleId       Int
  role         Role       @relation(fields: [roleId], references: [id])
  permissionId Int
  permission   Permission @relation(fields: [permissionId], references: [id])
  companyId    Int
  company      Company    @relation(fields: [companyId], references: [id])
  createdAt    DateTime   @default(now())
  updatedAt    DateTime   @updatedAt
  deletedAt    DateTime?
  createdBy    Int?
  updatedBy    Int?
  deletedBy    Int?
}

model RoleUser {
  id        Int       @id @default(autoincrement())
  roleId    Int
  role      Role      @relation(fields: [roleId], references: [id])
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}

model Project {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  abbreviation String?
  start_date   DateTime
  end_date     DateTime
  responsible  String
  client       String
  budget       Int?
  status       Int?
  priority     Int?
  category     String
  risks        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  deletedAt    DateTime?
  createdBy    Int?
  updatedBy    Int?
  deletedBy    Int?
}

model ProjectCategory {
  id        Int       @id @default(autoincrement())
  name      Int
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  createdBy Int?
  updatedBy Int?
  deletedBy Int?
}
